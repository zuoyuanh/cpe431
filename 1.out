{"types":[{"line":1,"id":"simple","fields":[{"line":3,"type":"int","id":"one"}]},{"line":6,"id":"foo","fields":[{"line":8,"type":"int","id":"bar"},{"line":9,"type":"bool","id":"cool"},{"line":10,"type":"simple","id":"simp"}]}],"declarations":[{"line":13,"type":"foo","id":"globalfoo"}],"functions":[{"line":15,"id":"tailrecursive","parameters":[{"line":15,"type":"int","id":"num"}],"return_type":"void","declarations":[{"line":17,"type":"foo","id":"unused"}],"body":[{"line":18,"stmt":"if","guard":{"line":18,"exp":"binary","operator":"<=","lft":{"line":18,"exp":"id","id":"num"},"rht":{"line":18,"exp":"num","value":"0"}},"then":{"stmt":"block","list":[{"line":20,"stmt":"return"}]}},{"line":22,"stmt":"assign","source":{"line":22,"exp":"new","id":"foo"},"target":{"line":22,"id":"unused"}},{"line":23,"stmt":"invocation","id":"tailrecursive","args":[{"line":23,"exp":"binary","operator":"-","lft":{"line":23,"exp":"id","id":"num"},"rht":{"line":23,"exp":"num","value":"1"}}]}]},{"line":26,"id":"add","parameters":[{"line":26,"type":"int","id":"x"},{"line":26,"type":"int","id":"y"}],"return_type":"int","declarations":[],"body":[{"line":28,"stmt":"return","exp":{"line":28,"exp":"binary","operator":"+","lft":{"line":28,"exp":"id","id":"x"},"rht":{"line":28,"exp":"id","id":"y"}}}]},{"line":31,"id":"domath","parameters":[{"line":31,"type":"int","id":"num"}],"return_type":"void","declarations":[{"line":33,"type":"foo","id":"math1"},{"line":34,"type":"foo","id":"math2"},{"line":35,"type":"int","id":"tmp"}],"body":[{"line":37,"stmt":"assign","source":{"line":37,"exp":"new","id":"foo"},"target":{"line":37,"id":"math1"}},{"line":38,"stmt":"assign","source":{"line":38,"exp":"new","id":"simple"},"target":{"line":38,"left":{"line":38,"id":"math1"},"id":"simp"}},{"line":39,"stmt":"assign","source":{"line":39,"exp":"new","id":"foo"},"target":{"line":39,"id":"math2"}},{"line":40,"stmt":"assign","source":{"line":40,"exp":"new","id":"simple"},"target":{"line":40,"left":{"line":40,"id":"math2"},"id":"simp"}},{"line":42,"stmt":"assign","source":{"line":42,"exp":"id","id":"num"},"target":{"line":42,"left":{"line":42,"id":"math1"},"id":"bar"}},{"line":43,"stmt":"assign","source":{"line":43,"exp":"num","value":"3"},"target":{"line":43,"left":{"line":43,"id":"math2"},"id":"bar"}},{"line":44,"stmt":"assign","source":{"line":44,"exp":"dot","left":{"line":44,"exp":"id","id":"math1"},"id":"bar"},"target":{"line":44,"left":{"line":44,"left":{"line":44,"id":"math1"},"id":"simp"},"id":"one"}},{"line":45,"stmt":"assign","source":{"line":45,"exp":"dot","left":{"line":45,"exp":"id","id":"math2"},"id":"bar"},"target":{"line":45,"left":{"line":45,"left":{"line":45,"id":"math2"},"id":"simp"},"id":"one"}},{"line":47,"stmt":"while","guard":{"line":47,"exp":"binary","operator":">","lft":{"line":47,"exp":"id","id":"num"},"rht":{"line":47,"exp":"num","value":"0"}},"body":{"stmt":"block","list":[{"line":49,"stmt":"assign","source":{"line":49,"exp":"binary","operator":"*","lft":{"line":49,"exp":"dot","left":{"line":49,"exp":"id","id":"math1"},"id":"bar"},"rht":{"line":49,"exp":"dot","left":{"line":49,"exp":"id","id":"math2"},"id":"bar"}},"target":{"line":49,"id":"tmp"}},{"line":50,"stmt":"assign","source":{"line":50,"exp":"binary","operator":"/","lft":{"line":50,"exp":"binary","operator":"*","lft":{"line":50,"exp":"id","id":"tmp"},"rht":{"line":50,"exp":"dot","left":{"line":50,"exp":"dot","left":{"line":50,"exp":"id","id":"math1"},"id":"simp"},"id":"one"}},"rht":{"line":50,"exp":"dot","left":{"line":50,"exp":"id","id":"math2"},"id":"bar"}},"target":{"line":50,"id":"tmp"}},{"line":51,"stmt":"assign","source":{"line":51,"exp":"invocation","id":"add","args":[{"line":51,"exp":"dot","left":{"line":51,"exp":"dot","left":{"line":51,"exp":"id","id":"math2"},"id":"simp"},"id":"one"},{"line":51,"exp":"dot","left":{"line":51,"exp":"id","id":"math1"},"id":"bar"}]},"target":{"line":51,"id":"tmp"}},{"line":52,"stmt":"assign","source":{"line":52,"exp":"binary","operator":"-","lft":{"line":52,"exp":"dot","left":{"line":52,"exp":"id","id":"math2"},"id":"bar"},"rht":{"line":52,"exp":"dot","left":{"line":52,"exp":"id","id":"math1"},"id":"bar"}},"target":{"line":52,"id":"tmp"}},{"line":53,"stmt":"assign","source":{"line":53,"exp":"binary","operator":"-","lft":{"line":53,"exp":"id","id":"num"},"rht":{"line":53,"exp":"num","value":"1"}},"target":{"line":53,"id":"num"}}]}},{"line":56,"stmt":"delete","exp":{"line":56,"exp":"id","id":"math1"}},{"line":57,"stmt":"delete","exp":{"line":57,"exp":"id","id":"math2"}}]},{"line":60,"id":"objinstantiation","parameters":[{"line":60,"type":"int","id":"num"}],"return_type":"void","declarations":[{"line":62,"type":"foo","id":"tmp"}],"body":[{"line":63,"stmt":"while","guard":{"line":63,"exp":"binary","operator":">","lft":{"line":63,"exp":"id","id":"num"},"rht":{"line":63,"exp":"num","value":"0"}},"body":{"stmt":"block","list":[{"line":65,"stmt":"assign","source":{"line":65,"exp":"new","id":"foo"},"target":{"line":65,"id":"tmp"}},{"line":66,"stmt":"delete","exp":{"line":66,"exp":"id","id":"tmp"}},{"line":67,"stmt":"assign","source":{"line":67,"exp":"binary","operator":"-","lft":{"line":67,"exp":"id","id":"num"},"rht":{"line":67,"exp":"num","value":"1"}},"target":{"line":67,"id":"num"}}]}}]},{"line":71,"id":"ackermann","parameters":[{"line":71,"type":"int","id":"m"},{"line":71,"type":"int","id":"n"}],"return_type":"int","declarations":[],"body":[{"line":73,"stmt":"if","guard":{"line":73,"exp":"binary","operator":"==","lft":{"line":73,"exp":"id","id":"m"},"rht":{"line":73,"exp":"num","value":"0"}},"then":{"stmt":"block","list":[{"line":75,"stmt":"return","exp":{"line":75,"exp":"binary","operator":"+","lft":{"line":75,"exp":"id","id":"n"},"rht":{"line":75,"exp":"num","value":"1"}}}]}},{"line":78,"stmt":"if","guard":{"line":78,"exp":"binary","operator":"==","lft":{"line":78,"exp":"id","id":"n"},"rht":{"line":78,"exp":"num","value":"0"}},"then":{"stmt":"block","list":[{"line":80,"stmt":"return","exp":{"line":80,"exp":"invocation","id":"ackermann","args":[{"line":80,"exp":"binary","operator":"-","lft":{"line":80,"exp":"id","id":"m"},"rht":{"line":80,"exp":"num","value":"1"}},{"line":80,"exp":"num","value":"1"}]}}]},"else":{"stmt":"block","list":[{"line":84,"stmt":"return","exp":{"line":84,"exp":"invocation","id":"ackermann","args":[{"line":84,"exp":"binary","operator":"-","lft":{"line":84,"exp":"id","id":"m"},"rht":{"line":84,"exp":"num","value":"1"}},{"line":84,"exp":"invocation","id":"ackermann","args":[{"line":84,"exp":"id","id":"m"},{"line":84,"exp":"binary","operator":"-","lft":{"line":84,"exp":"id","id":"n"},"rht":{"line":84,"exp":"num","value":"1"}}]}]}}]}}]},{"line":88,"id":"main","parameters":[],"return_type":"int","declarations":[{"line":90,"type":"int","id":"a"},{"line":90,"type":"int","id":"b"},{"line":90,"type":"int","id":"c"},{"line":90,"type":"int","id":"d"},{"line":90,"type":"int","id":"e"}],"body":[{"line":92,"stmt":"assign","source":{"line":92,"exp":"read"},"target":{"line":92,"id":"a"}},{"line":93,"stmt":"assign","source":{"line":93,"exp":"read"},"target":{"line":93,"id":"b"}},{"line":94,"stmt":"assign","source":{"line":94,"exp":"read"},"target":{"line":94,"id":"c"}},{"line":95,"stmt":"assign","source":{"line":95,"exp":"read"},"target":{"line":95,"id":"d"}},{"line":96,"stmt":"assign","source":{"line":96,"exp":"read"},"target":{"line":96,"id":"e"}},{"line":98,"stmt":"invocation","id":"tailrecursive","args":[{"line":98,"exp":"id","id":"a"}]},{"line":99,"stmt":"print","exp":{"line":99,"exp":"id","id":"a"},"endl":true},{"line":100,"stmt":"invocation","id":"domath","args":[{"line":100,"exp":"id","id":"b"}]},{"line":101,"stmt":"print","exp":{"line":101,"exp":"id","id":"b"},"endl":true},{"line":102,"stmt":"invocation","id":"objinstantiation","args":[{"line":102,"exp":"id","id":"c"}]},{"line":103,"stmt":"print","exp":{"line":103,"exp":"id","id":"c"},"endl":true},{"line":104,"stmt":"print","exp":{"line":104,"exp":"invocation","id":"ackermann","args":[{"line":104,"exp":"id","id":"d"},{"line":104,"exp":"id","id":"e"}]},"endl":true},{"line":106,"stmt":"return","exp":{"line":106,"exp":"num","value":"0"}}]}]}
--- Generating LLVM Code ---
	.arch armv7-a
	.comm   globalfoo,4,4

	.text
	.align 2
	.global tailrecursive
tailrecursive:
.LU1: 
	push {fp, lr}
	add fp, sp, #4
	mov r1(%num), r0
	mov r0(u0), #0
	mov r0(u4), #0
	cmp r1(%num), r0(u4)
	movle r0(u0), #1
	cmp r0(u0), #1
	beq .LU2
	b .LU3
.LU2: 
	b .LU0
.LU3: 
	b .LU4
.LU4: 
	sub r0(u3), r1(%num), #1
	bl tailrecursive
	b .LU0
.LU0: 
	pop {fp, pc}
	.size tailrecursive, .-tailrecursive
	.align 2
	.global add
add:
.LU6: 
	push {fp, lr}
	add fp, sp, #4
	mov r2(%x), r0
	add r0(u5), r2(%x), r0(%y)
	b .LU5
.LU5: 
	pop {fp, pc}
	.size add, .-add
	.align 2
	.global domath
domath:
.LU8: 
	push {fp, lr}
	add fp, sp, #4
	mov r4(%num), r0
	mov r5(u65), r4(%num)
	movw r0, #12
	bl malloc
	mov r2(u9), r0(u8)
	mov r10, r2(u9)
	str r10, [SPILL(u66)]
	mov r8(u63), r2(u9)
	add r1(u10), r2(u9), #8
	movw r0, #4
	bl malloc
	str r0(u12), [r1(u10)]
	movw r0, #12
	bl malloc
	mov r3(u14), r0(u13)
	mov r6(u67), r3(u14)
	mov r7(u64), r3(u14)
	add r1(u15), r3(u14), #8
	movw r0, #4
	bl malloc
	str r0(u17), [r1(u15)]
	add r0(u18), r2(u9), #0
	str r4(%num), [r0(u18)]
	add r0(u19), r3(u14), #0
	mov r1(u68), #3
	str r1(u68), [r0(u19)]
	add r0(u20), r2(u9), #8
	ldr r0(u21), [r0(u20)]
	add r1(u22), r0(u21), #0
	add r0(u23), r2(u9), #0
	ldr r0(u24), [r0(u23)]
	str r0(u24), [r1(u22)]
	add r0(u25), r3(u14), #8
	ldr r0(u26), [r0(u25)]
	add r1(u27), r0(u26), #0
	add r0(u28), r3(u14), #0
	ldr r0(u29), [r0(u28)]
	str r0(u29), [r1(u27)]
	mov r0(u30), #0
	mov r0(u69), #0
	cmp r4(%num), r0(u69)
	movgt r0(u30), #1
	cmp r0(u30), #1
	beq .LU9
	b .LU10
.LU9: 
	mov r3(u58), r5(u65)
	mov r0(u34), r7(u64)
	mov r6(u67), r0(u34)
	mov r7(u64), r0(u34)
	mov r1(u31), r8(u63)
	mov r10, r1(u31)
	str r10, [SPILL(u66)]
	mov r8(u63), r1(u31)
	add r0(u46), r0(u34), #8
	ldr r0(u47), [r0(u46)]
	add r0(u48), r0(u47), #0
	ldr r2(u49), [r0(u48)]
	add r0(u50), r1(u31), #0
	ldr r0(u51), [r0(u50)]
	mov r0, r2(u49)
	bl add
	sub r1(u59), r3(u58), #1
	mov r5(u65), r1(u59)
	mov r0(u60), #0
	mov r0(u70), #0
	cmp r1(u59), r0(u70)
	movgt r0(u60), #1
	cmp r0(u60), #1
	beq .LU9
	b .LU10
.LU10: 
	mov r1(u62), r6(u67)
	ldr r9, [SPILL(u66)]
	mov r0(u61), r9
	bl free
	mov r0, r1(u62)
	bl free
	b .LU7
.LU7: 
	pop {fp, pc}
	.size domath, .-domath
	.align 2
	.global objinstantiation
objinstantiation:
.LU12: 
	push {fp, lr}
	add fp, sp, #4
	mov r1(%num), r0
	mov r2(u77), r1(%num)
	mov r0(u71), #0
	mov r0(u78), #0
	cmp r1(%num), r0(u78)
	movgt r0(u71), #1
	cmp r0(u71), #1
	beq .LU13
	b .LU14
.LU13: 
	mov r1(u74), r2(u77)
	movw r0, #12
	bl malloc
	bl free
	sub r1(u75), r1(u74), #1
	mov r2(u77), r1(u75)
	mov r0(u76), #0
	mov r0(u79), #0
	cmp r1(u75), r0(u79)
	movgt r0(u76), #1
	cmp r0(u76), #1
	beq .LU13
	b .LU14
.LU14: 
	b .LU11
.LU11: 
	pop {fp, pc}
	.size objinstantiation, .-objinstantiation
	.align 2
	.global ackermann
ackermann:
.LU16: 
	push {fp, lr}
	add fp, sp, #4
	mov r3(%m), r0
	mov r0(u80), #0
	mov r0(u91), #0
	cmp r3(%m), r0(u91)
	moveq r0(u80), #1
	cmp r0(u80), #1
	beq .LU17
	b .LU18
.LU17: 
	add r0(u81), r1(%n), #1
	b .LU15
.LU18: 
	b .LU19
.LU19: 
	mov r0(u82), #0
	mov r0(u92), #0
	cmp r1(%n), r0(u92)
	moveq r0(u82), #1
	cmp r0(u82), #1
	beq .LU20
	b .LU21
.LU20: 
	sub r0(u83), r3(%m), #1
	mov r1, #1
	bl ackermann
	b .LU15
.LU21: 
	sub r2(u85), r3(%m), #1
	sub r0(u86), r1(%n), #1
	mov r1, r0(u86)
	mov r0, r3(%m)
	bl ackermann
	mov r1, r0(u87)
	mov r0, r2(u85)
	bl ackermann
	b .LU15
.LU15: 
	pop {fp, pc}
	.size ackermann, .-ackermann
	.align 2
	.global main
main:
.LU24: 
	push {fp, lr}
	add fp, sp, #4
	movw r1, #:lower16:.read_scratch
	movt r1, #:upper16:.read_scratch
	movw r0, #:lower16:.READ_FMT
	movt r0, #:upper16:.READ_FMT
	bl scanf
	movw r5(u93), #:lower16:.read_scratch
	movt r5(u93), #:upper16:.read_scratch
	ldr r5(u93), [r5(u93)]
	movw r1, #:lower16:.read_scratch
	movt r1, #:upper16:.read_scratch
	movw r0, #:lower16:.READ_FMT
	movt r0, #:upper16:.READ_FMT
	bl scanf
	movw r6(u94), #:lower16:.read_scratch
	movt r6(u94), #:upper16:.read_scratch
	ldr r6(u94), [r6(u94)]
	movw r1, #:lower16:.read_scratch
	movt r1, #:upper16:.read_scratch
	movw r0, #:lower16:.READ_FMT
	movt r0, #:upper16:.READ_FMT
	bl scanf
	movw r3(u95), #:lower16:.read_scratch
	movt r3(u95), #:upper16:.read_scratch
	ldr r3(u95), [r3(u95)]
	movw r1, #:lower16:.read_scratch
	movt r1, #:upper16:.read_scratch
	movw r0, #:lower16:.READ_FMT
	movt r0, #:upper16:.READ_FMT
	bl scanf
	movw r4(u96), #:lower16:.read_scratch
	movt r4(u96), #:upper16:.read_scratch
	ldr r4(u96), [r4(u96)]
	movw r1, #:lower16:.read_scratch
	movt r1, #:upper16:.read_scratch
	movw r0, #:lower16:.READ_FMT
	movt r0, #:upper16:.READ_FMT
	bl scanf
	movw r2(u97), #:lower16:.read_scratch
	movt r2(u97), #:upper16:.read_scratch
	ldr r2(u97), [r2(u97)]
	mov r0, r5(u93)
	bl tailrecursive
	mov r1, r5(u93)
	movw r0, #:lower16:.PRINTLN_FMT
	movt r0, #:upper16:.PRINTLN_FMT
	bl printf
	mov r0, r6(u94)
	bl domath
	mov r1, r6(u94)
	movw r0, #:lower16:.PRINTLN_FMT
	movt r0, #:upper16:.PRINTLN_FMT
	bl printf
	mov r0, r3(u95)
	bl objinstantiation
	mov r1, r3(u95)
	movw r0, #:lower16:.PRINTLN_FMT
	movt r0, #:upper16:.PRINTLN_FMT
	bl printf
	mov r1, r2(u97)
	mov r0, r4(u96)
	bl ackermann
	movw r0, #:lower16:.PRINTLN_FMT
	movt r0, #:upper16:.PRINTLN_FMT
	bl printf
	b .LU23
.LU23: 
	mov r0, #0
	pop {fp, pc}
	.size main, .-main
	.section	.rodata
	.align	2
.PRINTLN_FMT:
	.asciz	"%ld"
	.align	2
.PRINT_FMT:
	.asciz	"%ld "
	.align	2
.READ_FMT:
	.asciz	"%ld"
	.comm	.read_scratch,4,4
	.global	__aeabi_idiv

